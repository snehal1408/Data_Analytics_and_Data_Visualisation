# -*- coding: utf-8 -*-
"""Data_Analytics_and_Data_Visualisation_using_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1luLHIXPwBxyXjdK-Gg15zyKY6BlJqP7c

# **Table of Contents:**
1. Introduction
2. Importing the required Libraries
3. Reading Both Datasets
4. Understanding Both Datasets
5. Combine or Merge two datasets
6. Viewing from the datset

>>6.1 Display first 8 raws of the dataset

>> 6.2 Display last 8 raws of the dataset

>> 6.3 Display the Index

>> 6.4 Display the list of columns

>> 6.5 Display the datatype of each column

>> 6.6 Display the summary information about dataset

>> 6.7 Display the shape of an array

>> 6.8 Display the length of an array

>> 6.9 Display the data by selection

>>> 6.9.1 Selecting by labels

>>> 6.9.2 Selecting by positions

>>> 6.9.3 Contitional selection

>> 6.10 Finding duplicates in the dataset

>> 6.11 Finding unique values in each column

7. Sorting data
8. Transpose the data
9. Do some basic aggregation operations

> 9.1 Aggregating statistics grouped by category

10. Finding missing values
11. Data Cleaning (Find and fill the null values)
12. Changing Datatypes
13. Some basic Plots

> 13.1 Line Chart

> 13.2 Bar Chart

> 13.3 Scatter Chart

> 13.4 Pie Chart

> 13.5 Histogram

> 13.6 Box plot

14. Answering the reaserch questions

> 14.1 Draw **Scatter Chart** using **Matplotlib**

> 14.2 Draw **Histogram** using **Matplotlib**

> 14.3 Draw **Scatter Plot** using **Seaborn**

> 14.4 Draw **Count Plot** using **Seaborn**

> 14.5 Draw **Cat Plot** using **Seaborn**

> 14.6 Draw **Pie Chart** using **Matplotlib**

> 14.7 Draw **Line Chart** using **Matplotlib**

> 14.8 Draw **Box Plot** using **Seaborn**

> 14.9 Draw **Bar Chart** using **Seaborn**

15. Save the dataset in file

# 1. Introduction:

The recent pandemic of novel coronavirus 2019 (2019-nCoV) was identified in Wuhan in China. This virus is spreading around the world very rapidly, and it has already affected thousands of people. As of 17th October 2020, a total of 39.1 million confirmed cases of COVID-19 and 1.1 million deaths were reported worldwide.

A vaccine is a substance that helps protect against certain diseases like COVID-19. Vaccines teach our immune system about creating antibodies that protects you from the disease. This sort of immunity can stay in our body for years, and our immune system remembers how to fight that same infection. If enough people are vaccinated, it is harder for the disease to spread to those people who are not vaccinated, and that concept is called 'herd immunity'.

In this Project, I am **`provided with the dataset with two .CSV file ("covid_flu_survey_features" and "covid_response_labels")`** of a large number of participants who were asked about their perception of the Seasonal Flu and COVID-19 vaccine. The data was collected from the participants across different demographics and categories such as age range, occupation, level of education, gender, income level, marital status, accommodation status, employment status, location, location type, no of adults in the house, no of children in the house, employment industry and employment occupation etc. The data represented different views and concerns about the participants understanding of flu and COVID-19 vaccines and are they taking all the precautions such as wearing a face mask, washing hands frequently, avoid gathering, avoid travelling etc.

The data is collected for approximately 25k participants. In the research report, **`Some of my initial findings are:`** 

1. Participants who are not concerned and has no knowledge of COVID-19, are they likely to avoid taking any precautions such as wearing a face mask?

2. Participant’s worry about getting sick from COVID-19 vaccine because they think that they can get flu from taking the seasonal flu vaccine.

3. Amount of people from low-income families living in cities are concerned about COVID-19?

4. How much ethnic minority male & female with a chronic medical condition are worried about the risk of getting sick with COVID-19 before getting a vaccine?

5. Are there any special consideration on who should get the COVID-19 vaccine first?

6. Is COVID-19 vaccine expected to be more effective for elder participants?

7. What are the chances of someone getting both COVID-19 and Seasonal flu vaccination at the same time?

8. Are older people more worried about getting sick from the COVID-19 than younger people?

9. No. of black healthcare worker concerned about COVID-19?

These research questions will be used for data analysis and visualization techniques to present the data in a user friendly manner. The results and discussion are presented below every research question.

# 2. Importing the required Libraries:
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# 3. Reading Both Datasets:

In this, two datasets named as "covid_response_labels" and "covid_flu_survey_features" are given. 

- So, first we need to **`read`** both dataset:
"""

#Reading "covid_flu_survey_features" dataset from the google drive#
import requests
from io import StringIO
orig_url='https://drive.google.com/file/d/1oGVt5WhGwXODVx_OJTiiqfPzhLGBZJMN/view?usp=sharing'
file_id = orig_url.split('/')[-2]
dwn_url='https://drive.google.com/uc?export=download&id=' + file_id
url2 = requests.get(dwn_url).text
csv_raw = StringIO(url2)
covid_df1 = pd.read_csv(csv_raw) # covid_df1 is first dataframe used for 'covid_flu_survey_features' dataset
covid_df1

#Reading "covid_response_labels" dataset from the google drive#
orig_url='https://drive.google.com/file/d/1vj6wBCvoMYYUQEJL7ZETD_qeqiTaz3g7/view?usp=sharing'
file_id = orig_url.split('/')[-2]
dwn_url='https://drive.google.com/uc?export=download&id=' + file_id
url2 = requests.get(dwn_url).text
csv_raw = StringIO(url2)
covid_df2 = pd.read_csv(csv_raw)# covid_df2 is second dataframe used for 'covid_response_labels' dataset 
covid_df2

"""# 4. Understanding Both Datasets:

### The **`covid_flu_survey_features`** dataset consists of the following 36 data columns with 26,707 rows (No. of participant's):

1. **participant_id**: ID of the participant. It is a unique and random identifier.

2. **covid_concern_level**: Level of concern about Covid-19.
0 = Not at all concerned; 1 = Not very concerned; 2 = Somewhat concerned; 3 = Very concerned.

3. **covid_knowledge_level**: Level of knowledge about Covid flu.
0 = No knowledge; 1 = A little knowledge; 2 = A lot of knowledge.

4. **Has_taken_any_meds**: Has taken any related medications (common cold, antimalarial drugs,etc.)

5. **precautions_avoidance**: Takes precautions to avoid contact with other non-related people

6. **wears_face_mask**: Wears face masks when going out.

7. **wash_hands_frequently**: Follows government guidelines and wash hands frequently.

8. **avoids_large_gatherings**: Avoids or tries to avoid large gathering places such as restaurants, supermarkets during peak times and any form of contact with people outside of the household.

9. **reduced_outside_home_activity**: Reduced unnecessary travel and trips outside of home other than the most required ones.

10. **avoid_touching_face**: Follows government guidelines and make sure to minimize touching of face.

11. **gp_rec_covid_vacc**: The GP has recommended taking covid vaccination, when available.

12. **gp_rec_seasonal_vacc**: The GP has recommended (or previously had) taking seasonal flu vaccination.

13. **chronic_med_condition**: Has a chronic medical condition (asthma, diabetes, heart condition) or a weak immune system which makes the participant highly vulnerable.

14. **child_under_6_months**: Has a regular contact with a child under six months (nursery duty, baby at home, medical profession, etc).

15. **is_healthworker**: Is a healthcare worker (doctor, nurse, medical staff, etc.)

16. **has_health_insurance**: Is covered by medical insurance (public or private).

17. **opinion_covid_vacc_effective**: Participant's opinion about Covid-19 vaccine effectiveness (when ready).
1 = Not at all effective; 2 = Not very effective; 3 = Don't know; 4 = Somewhat effective; 5 = Very effective.

18. **opinion_covid_risk**: Participant's opinion about risk of getting sick with Covid flu without a vaccine.
1 = Very high; 2 = Somewhat high; 3 = Don't know; 4 = Somewhat low; 5 = Very Low.

19. **opinion_covid_sick_from_vacc**: Participant's worry of getting sick from taking Covid vaccine.
1 = Very worried ; 2 = Somewhat worried; 3 = Don't know; 4 = Not very worried; 5 = Not at all worried.

20. **opinion_seas_vacc_effective**: Participant's opinion about seasonal flu vaccine effectiveness.
1 = Not at all effective; 2 = Not very effective; 3 = Don't know; 4 = Somewhat effective; 5 = Very effective.

21. **opinion_seas_flu_risk**: Participant's opinion about risk of getting sick with seasonal flu without a
vaccine.
1 = Very Low; 2 = Somewhat low; 3 = Don't know; 4 = Somewhat high; 5 = Very high.

22. **opinion_seas_sick_from_vacc**: Participant's worry about getting sick from taking the seasonal flu vaccine.
1 = Not at all worried; 2 = Not very worried; 3 = Don't know; 4 = Somewhat worried; 5 = Very worried.

23. **age_group**: Participants age group.

24. **education_level**: Education level of the participant (self-reported).

25. **race**: Participants race

26. **gende**r: Participant’s gender

27. **income_level (in USD)**: Income level of the participants.

28. **marital_status**: Marital status of the participant.

29. **own_or_rent**: Accommodation status of the participant.

30. **employment_status**: Employment status of the participant.

31. **location**: Location of the participant. Values are random strings.

32. **location_type**: Type of location (rural, city and town).

33. **no_household_adults**: Number of adults in the household (excluding the participant). 4 or more capped at 3.

34. **household_children**: Number of children in the household. 4 or more capped at 3.

35. **employment_industry**: Employment industry type of the participant. Values are random strings.

36. **employment_occupation**: Type of job of the participant. Values are random strings.

### And, the **`covid_response_labels`** dataset consists of the following 3 data columns with 26,707 rows (No. of participant's):

1. **participant_id**: ID of the participant. It is a unique and random identifier.

2. **covid_vaccine**: Participant will ready to take COVID_19 vaccine when it available
1 = Will ready to take the COVID-19 vaccine when available; 0 = Will not ready to take COVID-19 vaccine

3. **seasonal_flu_vaccine**: Participant will ready to take Seasonal Flu vaccine
1 = Will ready to take the Seasonal Flu vaccine; 0 = Will not ready to take Seasonal Flu vaccine

# 5. Combine or Merge two datasets:

Here, two datsets are given. So, we need to combine that first and make it one.
"""

# Combine the two datasets that are given here
covid_df=pd.merge(covid_df1,covid_df2)#This will merge datasets with the same key value as 'participant_id' in both and store it into covid_df
covid_df

"""# 6. Viewing from the datset:

> ## 6.1 Display first 8 raws of the dataset:
"""

# Display first 8 raws of the dataset
covid_df.head(8)

"""> ## 6.2 Display last 8 raws of the dataset:"""

# Display last 8 raws of the dataset
covid_df.tail(8)

"""> ## 6.3 Display the Index:"""

# Display the index value in the dataset
covid_df.index

"""> ## 6.4 Display the list of columns:"""

# Display the list of columns from the dataset
covid_df.columns

"""> ## 6.5 Display the datatype of each column:"""

# Display the datatype of each column
covid_df.dtypes

"""> ## 6.6 Display the summary information about dataset:

"""

# Display the summary information about dataset
covid_df.info()

"""> ## 6.7 Display the shape of an array:"""

# Display shape of an array 
covid_df.shape # This will display size of each dimension

"""> ## 6.8 Display the length of an array:"""

# Display size of an array
len(covid_df) # This will display size of one dimension only

"""> ## 6.9 Display the data by selection:

>> ### 6.9.1 Selecting by labels:
"""

# Print record with indexes 11 to 15
covid_df.loc[11:15,:]

# Get all details of the index number 5
covid_df.loc[5]

# Get all entries for participant id and location type
covid_df.loc[:,['participant_id','location_type']]

# Display the 901 to 905th entry of participant id and location type
covid_df.loc[901:905,['participant_id','location_type']]

""">> ### 6.9.2 Selecting by positions:"""

# Print record with indexes 11 to 15
covid_df.iloc[11:16,:]

# Get all details of the index number 5
covid_df.iloc[5]

# Get all entries for participant id and location type
covid_df.iloc[:,[0,31]]

# Display the 901 to 905th entry of participant id and location type
covid_df.iloc[901:906,[0,31]]

""">> ### 6.9.3 Conditional selection:"""

# Get Number of people that are living in city
(covid_df['location_type']=='city').value_counts()

"""Observation: From above, we can see that 18843 people are living in cities and all other are living in rural area and town.

> ## 6.10 Finding duplicates in the dataset:
"""

# To find duplicates
covid_df[covid_df.duplicated()]

"""Observation: Fropm above, we can see that there is no duplicate row(participant entry) in the dataset that we need to clean. each raw has unique particiapant.

> ## 6.11 Finding unique values in each column:
"""

# to find unique value in each column
covid_df.nunique()

"""# 7. Sorting data:
There is no need here to sort data, but i just sort it by age group to display data by different age group.
"""

# Sort data by age group
covid_df.sort_values(by='age_group')

"""# 8. Transpose the data:"""

#Finding transpose of the data
covid_df.transpose()

"""# 9. Do some basic aggregation operations:"""

# Find the mean
covid_df.mean()

# Find the median
covid_df.median()

# Find the mode
covid_df.mode()

# Find the summary statistics
covid_df.describe()

# Find summary statistics of two column
covid_df[['covid_vaccine','covid_concern_level']].describe()

# Find summary statistics of two column
covid_df[['age_group','gender']].describe()

# Find range of covid_knowledge_level
covid_df['covid_knowledge_level'].max()-covid_df['covid_knowledge_level'].min()

# Find maximum from participant_id
covid_df['participant_id'].max()

# Find minimum from participant_id
covid_df['participant_id'].min()

#Calculating combinations of aggregating statistics using DataFrames.agg() method
covid_df.agg({'covid_vaccine':['min','max','median','mean'],
             'seasonal_flu_vaccine':['min','max','median','mean']})

"""> ## 9.1 Aggregating statistics grouped by category:"""

# To find average no. of male and female that are ready to take covid vaccine when it is available
covid_df.groupby(by='gender').mean()['covid_vaccine']

# What are the no. of males and females in 18 - 34 age group that are ready to take seasonal flu vaccine
covid_df.groupby(['gender','age_group','seasonal_flu_vaccine']).count()['participant_id']

# what are the no. of males and females have other or multiple race
covid_df.groupby(['gender','race']).count()['participant_id']

# What are the no. of males and females whose education level is colledge graduate and live in city
covid_df.groupby(['gender','education_level','location_type']).count()['participant_id']

# What are the no. of health workers ready to take both covid and seasonal flu vaccine
covid_df.groupby(['is_healthworker','covid_vaccine','seasonal_flu_vaccine']).count()['participant_id']

# what are the number of people that have low income and live in city
covid_df.groupby(['income_level','location_type']).count()['participant_id']

"""# 10. Finding missing values:"""

# Finding the missing values from the dataset
covid_df.isna()

#Finding the number of missing values from each columns
covid_df.isna().sum()

# We can also create heatmap to see which column has more missing value
sns.heatmap(covid_df.isnull())

"""# 11. Data Cleaning (Find and fill the null values)

Here, The the three columns has more than 10,000 null values such as:

- has_health_insurance (with 12274 null values)
- employment_industry (with 13330 null values)
- employment_occupation (with 13470 null values)

so, first we drop the has_health_insurance column because it has so much null values contains only 0 and 1, so I think we can't fill one of this on the basis of more values it contains i.e., 0 or 1.

Then, we need to fill null values with random string in both 'employment_industry' and 'employment_occupation' columns.

### Drop the 'has_health_insurance' column
"""

# Drop the has_health_insurance column
covid_df.drop(labels=['has_health_insurance'],axis=1,inplace=True)
covid_df

"""### Fill values in 'employment_industry' column"""

# Fill 'employment_industry' column with random string

#method 1
import random
import string
covid_df['employment_industry'].fillna("".join(random.choices(string.ascii_lowercase, k=8)),inplace=True)
covid_df['employment_industry']

# Fill 'employment_industry' column with more number of random string value

# method 2
# To count all the random string that 'employment_industry' have
#covid_df['employment_industry'].value_counts()

# To fill the more number of random string(fcxhlnwr) value in place of null value
#covid_df['employment_industry'].fillna('fcxhlnwr',inplace=True)
#covid_df['employment_industry']

"""### Fill values in 'employment_occupation' column"""

# Fill 'employment_occupation' column with random string

# method 1
# covid_df['employment_occupation'].fillna("".join(random.choices(string.ascii_lowercase, k=8)),inplace=True)
# covid_df['employment_occupation']

# Fill 'employment_occupation' column with more number of random string value

# method 2
# To count all the random string that 'employment_occupation' contains
covid_df['employment_occupation'].value_counts()

"""**In place of above**, to count more number of values in column, we can also use **mode()** function as shown below:"""

# To count all the random string that 'employment_occupation' contains
covid_df['employment_occupation'].mode()

# To fill the more number of random string(xtkaffoo) value in place of null value
covid_df['employment_occupation'].fillna('xtkaffoo',inplace=True)
covid_df['employment_occupation']

# Check whether this missing values are filled or not?
covid_df.isnull().sum()

"""#### Now, we need to clean all the following columns:
- education_level (with 1407 null values)                 
- income_level (with 4423 null values)                    
- marital_status (with 1408 null values)                  
- own_or_rent (with 2042 null values)                     
- employment_status (with 1463 null values)               
- no_household_adults (with 249 null values)              
- household_children (with 249 null values)  
- covid_concern_level (with 92 null values)
- covid_knowledge_level (with 116 null values)
- has_taken_any_meds (with 71 null values)
- precautions_avoidance (with 208 null values)
- wears_face_mask (with 19 null values)                   
- wash_hands_frequently (with 42 null values)             
- avoids_large_gatherings (with 87 null values)          
- reduced_outside_home_activity (with 82 null values)    
- avoid_touching_face (with 128 null values)              
- gp_rec_covid_vacc (with 2160 null values)     
- gp_rec_seasonal_vacc (with 2160 null values)            
- chronic_med_condition (with 971 null values)            
- child_under_6_months (with 820 null values)             
- is_healthworker (with 804 null values)                  
- opinion_covid_vacc_effective (with 391 null values)     
- opinion_covid_risk (with 388 null values)               
- opinion_covid_sick_from_vacc (with 395 null values)     
- opinion_seas_vacc_effective (with 462 null values)      
- opinion_seas_flu_risk (with 514 null values)            
- opinion_seas_sick_from_vacc (with 537 null values)

### Fill values in 'education_level' column
"""

# Conut all 'education_level' values
covid_df['education_level'].value_counts()

# So from above, we can see most of have completed 'College Graduate', so fill null values with that.
covid_df['education_level'].fillna('College Graduate',inplace=True)
covid_df['education_level']

"""### Fill values in 'income_level' column


"""

# Conut all 'income_level' values
covid_df['income_level'].value_counts()

# So from above output, we can see most of are in '<= $75,000, Above Poverty', so fill null values with that.
covid_df['income_level'].fillna('<= $75,000, Above Poverty',inplace=True)
covid_df['income_level']

"""### Fill values in 'marital_status' column"""

# Conut all 'marital_status' values
covid_df['marital_status'].value_counts()

# So from above output, we can see most of are 'Married', so fill null values with that.
covid_df['marital_status'].fillna('Married',inplace=True)
covid_df['marital_status']

"""### Fill values in 'own_or_rent' column"""

# Conut all 'own_or_rent' values
covid_df['own_or_rent'].value_counts()

# So from above output, we can see most of have 'Own' house, so fill null values with that.
covid_df['own_or_rent'].fillna('Own',inplace=True)
covid_df['own_or_rent']

"""### Fill values in 'employment_status' column"""

# Conut all 'employment_status' values
covid_df['employment_status'].value_counts()

# So from above output, we can see most of are 'Employed' house, so fill null values with that.
covid_df['employment_status'].fillna('Employed',inplace=True)
covid_df['employment_status']

"""### Fill values in 'no_household_adults' column"""

# Conut all 'no_household_adults' values
covid_df['no_household_adults'].value_counts()

# So from above output, we can see most of have '1' adult, so fill null values with that.
covid_df['no_household_adults'].fillna(1,inplace=True)
covid_df['no_household_adults']
covid_df.loc[205]

"""### Fill values in 'household_children' column"""

# Conut all 'household_children' values
covid_df['household_children'].value_counts()

# So from above output, we can see most of have '0' child, so fill null values with that.
covid_df['household_children'].fillna(0,inplace=True)
covid_df['household_children']

"""### Fill values in 'covid_concern_level' column"""

# Conut all 'covid_concern_level' values
covid_df['covid_concern_level'].value_counts()

# So from above output, we can see most of have '2' value (0 = Not at all concerned; 1 = Not very concerned; 
#2 = Somewhat concerned; 3 = Very concerned), so fill null values with that.
covid_df['covid_concern_level'].fillna(2,inplace=True)
covid_df['covid_concern_level']

"""### Fill values in 'covid_knowledge_level' column"""

# Conut all 'covid_knowledge_level' values
covid_df['covid_knowledge_level'].value_counts()

# So from above output, we can see most of have '1' value (0 = No knowledge; 1 = A little knowledge; 
# 2 = A lot of knowledge), so fill null values with that.
covid_df['covid_knowledge_level'].fillna(1,inplace=True)
covid_df['covid_knowledge_level']

"""### Fill values in 'has_taken_any_meds' column"""

# Conut all 'has_taken_any_meds' values
covid_df['has_taken_any_meds'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not taken; 1 = Taken), so fill null values with that.
covid_df['has_taken_any_meds'].fillna(0,inplace=True)
covid_df['has_taken_any_meds']

"""### Fill values in 'precautions_avoidance' column"""

# Conut all 'precautions_avoidance' values
covid_df['precautions_avoidance'].value_counts()

# So from above output, we can see most of have '1' value (0= Not taking precaution to avoid contact;
# 1 = Taking precaution to avoid contact), so fill null values with that.
covid_df['precautions_avoidance'].fillna(1,inplace=True)
covid_df['precautions_avoidance']

"""### Fill values in 'wears_face_mask' column"""

# Conut all 'wears_face_mask' values
covid_df['wears_face_mask'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not wearing mask; 
# 1 = Wearing mask), so fill null values with that.
covid_df['wears_face_mask'].fillna(0,inplace=True)
covid_df['wears_face_mask']

"""### Fill values in 'wash_hands_frequently' column"""

# Conut all 'wash_hands_frequently' values
covid_df['wash_hands_frequently'].value_counts()

# So from above output, we can see most of have '1' value (0 = Not washing hand frequently;
# 1 = Washing hand frequently), so fill null values with that.
covid_df['wash_hands_frequently'].fillna(1,inplace=True)
covid_df['wash_hands_frequently']

"""### Fill values in 'avoids_large_gatherings' column"""

# Conut all 'avoids_large_gatherings' values
covid_df['avoids_large_gatherings'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not avoiding gathering;
# 1 = Avoiding gathering), so fill null values with that.
covid_df['avoids_large_gatherings'].fillna(0,inplace=True)
covid_df['avoids_large_gatherings']

"""### Fill values in 'reduced_outside_home_activity' column"""

# Conut all 'reduced_outside_home_activity' values
covid_df['reduced_outside_home_activity'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not reduced unnecessary travelling;
# 1 = Reduced unnecessary travel), so fill null values with that.
covid_df['reduced_outside_home_activity'].fillna(0,inplace=True)
covid_df['reduced_outside_home_activity']

"""### Fill values in 'avoid_touching_face' column"""

# Conut all 'avoid_touching_face' values
covid_df['avoid_touching_face'].value_counts()

# So from above output, we can see most of have '1' value (0 = Not minimize touching of face;
# 1 = Minimize touching of face), so fill null values with that.
covid_df['avoid_touching_face'].fillna(1,inplace=True)
covid_df['avoid_touching_face']

"""### Fill values in 'gp_rec_covid_vacc' column"""

# Conut all 'gp_rec_covid_vacc' values
covid_df['gp_rec_covid_vacc'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not Recommended GP for covid vaccine;
# 1 = Recommended GP for covid vaccine), so fill null values with that.
covid_df['gp_rec_covid_vacc'].fillna(0,inplace=True)
covid_df['gp_rec_covid_vacc']

"""### Fill values in 'gp_rec_seasonal_vacc' column"""

# Conut all 'gp_rec_seasonal_vacc' values
covid_df['gp_rec_seasonal_vacc'].value_counts()

# So from above output, we can see most of have '0' value (0 = Not Recommended GP for Seasonal Flu vaccine;
# 1 = Recommended GP for Seasonal Flu vaccine), so fill null values with that.
covid_df['gp_rec_seasonal_vacc'].fillna(0,inplace=True)
covid_df['gp_rec_seasonal_vacc']

"""### Fill values in 'chronic_med_condition' column"""

# Conut all 'chronic_med_condition' values
covid_df['chronic_med_condition'].value_counts()

# So from above output, we can see most of have '0' value (0 = Has not chronic medical condition;
# 1 = Has chronic medical condition), so fill null values with that.
covid_df['chronic_med_condition'].fillna(0,inplace=True)
covid_df['chronic_med_condition']

"""### Fill values in 'child_under_6_months' column"""

# Conut all 'child_under_6_months' values
covid_df['child_under_6_months'].value_counts()

# So from above output, we can see most of have '0' value (0 = Has not regular contact with child under six month;
# 1 = Has regular contact with child under six month), so fill null values with that.
covid_df['child_under_6_months'].fillna(0,inplace=True)
covid_df['child_under_6_months']

"""### Fill values in 'is_healthworker' column"""

# Conut all 'is_healthworker' values
covid_df['is_healthworker'].value_counts()

# So from above output, we can see most of have '0' value (0 = Is not a health worker; 
# 1 = Is a health worker), so fill null values with that.
covid_df['is_healthworker'].fillna(0,inplace=True)
covid_df['is_healthworker']

"""### Fill values in 'opinion_covid_vacc_effective' column"""

# Conut all 'opinion_covid_vacc_effective' values
covid_df['opinion_covid_vacc_effective'].value_counts()

# So from above output, we can see most of have '4' value (1 = Not at all effective; 2 = Not very effective; 
# 3 = Don't know; 4 = Somewhat effective; 5 = Very effective), so fill null values with that.
covid_df['opinion_covid_vacc_effective'].fillna(4,inplace=True)
covid_df['opinion_covid_vacc_effective']

"""### Fill values in 'opinion_covid_risk' column"""

# Conut all 'opinion_covid_risk' values
covid_df['opinion_covid_risk'].value_counts()

# So from above output, we can see most of have '2' value (1 = Very high risk to getting sick with covid;
# 2 = Somewhat high risk to getting sick with covid; 3 = Don't know about risk to getting sick with covid;
# 4 = Somewhat low risk to getting sick with covid; 5 = Very Low risk to getting sick with covid), 
# so fill null values with that.
covid_df['opinion_covid_risk'].fillna(2,inplace=True)
covid_df['opinion_covid_risk']

"""### Fill values in 'opinion_covid_sick_from_vacc' column"""

# Conut all 'opinion_covid_sick_from_vacc' values
covid_df['opinion_covid_sick_from_vacc'].value_counts()

# So from above output, we can see most of have '2' value
# (1 = Very worried about getting sick from taking Covid vaccine;
# 2 = Somewhat worried about getting sick from taking Covid vaccine;
# 3 = Don't know about getting sick from taking Covid vaccine;
# 4 = Not very worried about getting sick from taking Covid vaccine;
# 5 = Not at all worried about getting sick from taking Covid vaccine), so fill null values with that.
covid_df['opinion_covid_sick_from_vacc'].fillna(2,inplace=True)
covid_df['opinion_covid_sick_from_vacc']

"""### Fill values in 'opinion_seas_vacc_effective' column"""

# Conut all 'opinion_seas_vacc_effective' values
covid_df['opinion_seas_vacc_effective'].value_counts()

# So from above output, we can see most of have '4' value (1 = Not at all effective; 2 = Not very effective;
# 3 = Don't know; 4 = Somewhat effective; 5 = Very effective), so fill null values with that.
covid_df['opinion_seas_vacc_effective'].fillna(4,inplace=True)
covid_df['opinion_seas_vacc_effective']

"""### Fill values in 'opinion_seas_flu_risk' column"""

# Conut all 'opinion_seas_flu_risk' values
covid_df['opinion_seas_flu_risk'].value_counts()

# So from above output, we can see most of have '2' value (1 = Very Low risk to getting sick with seasonal flu;
# 2 = Somewhat low risk to getting sick with seasonal flu; 3 = Don't know about risk to getting sick with seasonal flu;
# 4 = Somewhat high risk to getting sick with seasonal flu; 5 = Very high risk to getting sick with seasonal flu),
# so fill null values with that.
covid_df['opinion_seas_flu_risk'].fillna(2,inplace=True)
covid_df['opinion_seas_flu_risk']

"""### Fill values in 'opinion_seas_sick_from_vacc' column"""

# Conut all 'opinion_seas_sick_from_vacc' values
covid_df['opinion_seas_sick_from_vacc'].value_counts()

# So from above output, we can see most of have '1' value
# (1 = Not at all worried about getting sick from taking seasonal flu vaccine;
# 2 = Not very worried about getting sick from taking Covid vaccine;
# 3 = Don't know about getting sick from taking Covid vaccine;
# 4 = Somewhat worried about getting sick from taking Covid vaccine;
# 5 = Very worried about getting sick from taking Covid vaccine), so fill null values with that.
covid_df['opinion_seas_sick_from_vacc'].fillna(1,inplace=True)
covid_df['opinion_seas_sick_from_vacc']

"""### To check still is there any null value in any column?"""

# To check still is there any null value?
covid_df.isnull().sum()

"""From above we can see there is no null value in whole dataset and dataset is cleaned now.

# 12. Changing Datatypes:
"""

# Display the datatypes of each column
covid_df.dtypes

# To show memory usage
covid_df.memory_usage()

"""So, from above we can see that dataset contains float datatype in some of the columns because it had null value before(null value has bydefault float datatype) and float require more memory as compare to int datatype.

But, now we cleaned the dataset and fill all the null values, so for less memory consumption we need to change that datatype as below:
"""

# Changing datatypes
# In all columns, replace 'float64' with 'int8' to reduce memory
# But in participant_id, there are large number of participants that's why 'int8' is not sufficient, so no need to change it's datatype
covid_df['covid_concern_level'] = covid_df['covid_concern_level'].astype('int8')
covid_df['covid_knowledge_level'] = covid_df['covid_knowledge_level'].astype('int8')
covid_df['has_taken_any_meds'] = covid_df['has_taken_any_meds'].astype('int8')
covid_df['precautions_avoidance'] = covid_df['precautions_avoidance'].astype('int8')
covid_df['wears_face_mask'] = covid_df['wears_face_mask'].astype('int8')
covid_df['wash_hands_frequently'] = covid_df['wash_hands_frequently'].astype('int8')
covid_df['avoids_large_gatherings'] = covid_df['avoids_large_gatherings'].astype('int8')
covid_df['reduced_outside_home_activity'] = covid_df['reduced_outside_home_activity'].astype('int8')
covid_df['avoid_touching_face'] = covid_df['avoid_touching_face'].astype('int8')
covid_df['gp_rec_covid_vacc'] = covid_df['gp_rec_covid_vacc'].astype('int8')
covid_df['gp_rec_seasonal_vacc'] = covid_df['gp_rec_seasonal_vacc'].astype('int8')
covid_df['chronic_med_condition'] = covid_df['chronic_med_condition'].astype('int8')
covid_df['child_under_6_months'] = covid_df['child_under_6_months'].astype('int8')
covid_df['is_healthworker'] = covid_df['is_healthworker'].astype('int8')
covid_df['opinion_covid_vacc_effective'] = covid_df['opinion_covid_vacc_effective'].astype('int8')
covid_df['opinion_covid_risk'] = covid_df['opinion_covid_risk'].astype('int8')
covid_df['opinion_covid_sick_from_vacc'] = covid_df['opinion_covid_sick_from_vacc'].astype('int8')
covid_df['opinion_seas_vacc_effective'] = covid_df['opinion_seas_vacc_effective'].astype('int8')
covid_df['opinion_seas_flu_risk'] = covid_df['opinion_seas_flu_risk'].astype('int8')
covid_df['opinion_seas_sick_from_vacc'] = covid_df['opinion_seas_sick_from_vacc'].astype('int8')
covid_df['no_household_adults'] = covid_df['no_household_adults'].astype('int8')
covid_df['household_children'] = covid_df['household_children'].astype('int8')
covid_df['covid_vaccine'] = covid_df['covid_vaccine'].astype('int8')
covid_df['seasonal_flu_vaccine'] = covid_df['seasonal_flu_vaccine'].astype('int8')

covid_df.memory_usage()

"""From above, we can see that now it requires less memory as compare to earlier.

# 13. Some basic Plots:

## 13.1 Line Chart
"""

# Line chart
np.random.seed(1000)
df = pd.DataFrame(np.random.randn(5,3), columns=['P','Q','R'],
                  index=np.arange(0,50,10))
#df
df.plot(fontsize=20,ls='--')
plt.xlabel("X values", fontsize=20)
plt.ylabel("Y values", fontsize=20)
plt.suptitle("Line Chart", fontsize=20)
plt.show()

"""## 13.2 Bar Chart"""

# Bar chart
np.random.seed(10000)
fig, ax = plt.subplots(1,2,figsize=(15,5))
data = pd.Series(np.random.rand(5), index=[1980, 1990, 2000, 2010, 2020])
data.plot.bar(ax=ax[0], color='y', alpha=0.7).set(title='Vertical Bar chart',xlabel='Year',ylabel='Random Number')
data.plot.barh(ax=ax[1], color='m', alpha=0.3).set(title='Horizontal Bar chart',xlabel='Random Number',ylabel='Year')
fig.show()

"""## 13.3 Scatter Chart"""

# Scatter Chart
np.random.seed(1000000)
plt. scatter(np.random.rand(20),np.random.rand(20),c=np.random.rand(20),alpha=0.5)
plt.title('Scatter Chart',fontsize=15)
plt.show()

"""## 13.4 Pie Chart"""

# Pie chart
np.random.seed(1000)
labels = '1990','2000','2010','2020'
explode = (0.2, 0, 0, 0)
plt.pie(np.random.rand(4), explode=explode, labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=90)
plt.title('Pie Chart',fontsize=15)
plt.show()

"""## 13.5 Histogram"""

# Histogram
np.random.seed(1000)
plt.hist(np.random.rand(25),bins=5,color='m',alpha=0.3)
plt.title('Histogram',fontsize=15)
plt.show()

"""## 13.6 Box Plot """

# Box plot
np.random.seed(10000)
df = pd.DataFrame(np.random.rand(10, 5), columns=['A', 'B', 'C', 'D', 'E'])
#df
df.plot.box(grid='True')
plt.title('Box Plot', fontsize=15)
plt.show()

"""# 14. Answering the reaserch questions:

> ### **Question : 1**. Participants who are not concerned and has no knowledge of COVID-19, are they likely to avoid taking any precautions such as wearing a face mask?
"""

# To find participants who are not concerned and has no knowledge of COVID-19 and avoid taking precautions

# Method 1
que_1 = covid_df.groupby(['covid_concern_level','covid_knowledge_level','precautions_avoidance',
                  'wears_face_mask','wash_hands_frequently','avoids_large_gatherings',
                  'reduced_outside_home_activity','avoid_touching_face']).count()['participant_id']
que_1

"""#### **Observation:** From above output, We can say that no. of participants who are not concerned (means all have '0' value) and has no knowledge (means all have '0' value) of COVID-19 and avoid taking all type of precautions (means all have '0' value) are **154**."""

#Method 2
que_1 = covid_df[(covid_df['covid_concern_level']==0) & (covid_df['covid_knowledge_level']==0) &
                     (covid_df['precautions_avoidance']==0) & (covid_df['wears_face_mask']==0) & 
                     (covid_df['wash_hands_frequently']==0) & (covid_df['avoids_large_gatherings']==0) & 
                     (covid_df['reduced_outside_home_activity']==0) & (covid_df['avoid_touching_face']==0)]

que_1

"""#### **Observation:** From above output, We can see directly that there are **154** participants who are not concerned and has no knowledge of COVID-19 and avoid taking all type of precautions.

## 14.1 Draw **Scatter Chart** using **Matplotlib**
"""

# To draw scatter chart Using 'Matplotlib'
df1=pd.DataFrame({'participant_id':que_1['participant_id'],
                  'covid_concern_level':que_1['covid_concern_level'],
                  'covid_knowledge_level':que_1['covid_knowledge_level'],
                  'precautions_avoidance':que_1['precautions_avoidance'],
                  'wears_face_mask':que_1['wears_face_mask'],
                  'wash_hands_frequently':que_1['wash_hands_frequently'],
                  'avoids_large_gatherings':que_1['avoids_large_gatherings'],
                  'reduced_outside_home_activity':que_1['reduced_outside_home_activity'],
                  'avoid_touching_face':que_1['avoid_touching_face']})
df1.reset_index(inplace = True, drop = True)
df1['participant_id']=np.arange(1, len(df1) + 1)

# Plotting Scatter plot for different precausions and covid concern level and 
# knowledge level of covid
fig,ax = plt.subplots(2,4,figsize=(20,13))
df1.plot.scatter(ax=ax[0][0],x='covid_concern_level',y='participant_id',label='covid_concern_level',color='r')
df1.plot.scatter(ax=ax[0][1],x='covid_knowledge_level',y='participant_id',label='covid_knowledge_level',color='c')
df1.plot.scatter(ax=ax[0][2],x='precautions_avoidance',y='participant_id',label='precautions_avoidance',color='g')
df1.plot.scatter(ax=ax[0][3],x='wears_face_mask',y='participant_id',label='wears_face_mask',color='b')
df1.plot.scatter(ax=ax[1][0],x='wash_hands_frequently',y='participant_id',label='wash_hands_frequently',color='m')
df1.plot.scatter(ax=ax[1][1],x='avoids_large_gatherings',y='participant_id',label='avoids_large_gatherings',color='y')
df1.plot.scatter(ax=ax[1][2],x='reduced_outside_home_activity',y='participant_id',label='reduced_outside_home_activity',color='k')
df1.plot.scatter(ax=ax[1][3],x='avoid_touching_face',y='participant_id',label='avoid_touching_face',color='r')
ax[0][0].set_title('No. of people who are not concered about covid',fontsize=11)
ax[0][1].set_title('No. of people who have not knowledge about covid',fontsize=11)
ax[0][2].set_title('No. of people who are not avoiding to contact other',fontsize=11)
ax[0][3].set_title('No. of people who are not wearing face mask',fontsize=11)
ax[1][0].set_title('No. of people who are not washing hands frequently',fontsize=11)
ax[1][1].set_title('No. of people who are not avoiding large gathering',fontsize=11)
ax[1][2].set_title('No. of people who are not reducing outside activity',fontsize=11)
ax[1][3].set_title('No. of people who are not avoiding to touch face',fontsize=11)
fig.suptitle('No. of participants who are not concerned and have no knowledge of COVID-19 and avoid taking all the precautions',
             fontsize=20)
fig.show()

"""Here, I have drawn separate scatter chart for each precaution(6 type of precaution), covid concern and covid knowledge because all have same value(0). So they were overlapping.

#### **Observation:** From above scatter chart, we can see that at every scatter chart have around 160 participants who are not concerned and have no knowledge of COVID-19 and avoid taking any of the precautions.

> ### **Question : 2**. Participant’s worry about getting sick from COVID-19 vaccine because they think that they can get flu from taking the seasonal flu vaccine.
"""

# To find participant’s worry about getting sick from COVID-19 vaccine because they think that they can get flu 
# from taking the seasonal flu vaccine.

#Method 1
que_2 = covid_df.groupby(['opinion_covid_sick_from_vacc','opinion_seas_sick_from_vacc']).count()['participant_id']
que_2

"""#### **Observation:** From above output, We can say that no. of participants who worry about getting sick from COVID-19 vaccine (means all have '1' and '2' value(575+224)) because they think that they can get flu from taking the seasonal flu vaccine (means all have '4' and '5' value(1288+235)) are **2322** (575+224+1288+235)."""

# Method 2
que_2 = covid_df[((covid_df['opinion_covid_sick_from_vacc']==1) | (covid_df['opinion_covid_sick_from_vacc']==2)) &
                 ((covid_df['opinion_seas_sick_from_vacc']==4) | (covid_df['opinion_seas_sick_from_vacc']==5))]
que_2

"""#### **Observation:** From above output, We can see directly that there are **2322** participants who worry about getting sick from COVID-19 vaccine because they think that they can get flu from taking the seasonal flu vaccine.

## 14.2 Draw **Histogram** using **Matplotlib**
"""

# To draw histogram using 'Matplotlib'
df2=pd.DataFrame({'opinion_covid_sick_from_vacc':que_2['opinion_covid_sick_from_vacc'],
                  'opinion_seas_sick_from_vacc':que_2['opinion_seas_sick_from_vacc']})
df2.reset_index(inplace = True, drop = True)
df2.plot.hist(figsize=(10,5))

# Plotting Histogram
plt.xlabel('Opinion of participants about getting sick from vaccine',fontsize=20)
plt.ylabel('No. of Participants',fontsize=20)
plt.title('Worried Participants',fontsize=25)
plt.legend(fontsize=14)
plt.show()

"""#### **Observation:** From above Histogram, we can say that around 750 participants who are more worried and around 1500 participants who are some what worried about getting sick with covid vaccine where as around 500 people who are more worried and around 1750 people who are some what worried about getting sick with seasonal flu vaccine. So we can also say that  people are more worried about getting sick with covid vaccine as compare to seasonal flu vaccine. Here, if we do addition of participants i.e., (around 1500 + around 750) or (around 1750 + aroud 500) than we will get total number of participant i.e., around 2300.

> ### **Question : 3**. Amount of people from low-income families living in cities are concerned about COVID-19?
"""

# To find amount of people from low-income families living in cities are concerned about COVID-19

#Method 1
que_3 = covid_df.groupby(['income_level','location_type','covid_concern_level']).count()['participant_id']
que_3

"""#### **Observation:** From above output, We can say that amount of people from low-income families (means all are Below Poverty) living in cities (means all have 'City' in their column) are concerned (means all have '2' and '3' value(257+274)) about COVID-19 are **531**(257+274)."""

# Method 2
que_3 = covid_df[(covid_df['income_level']=='Below Poverty') & (covid_df['location_type']=='city') & 
                 ((covid_df['covid_concern_level']==2) | (covid_df['covid_concern_level']==3))]
que_3

"""#### **Observation:** From above output, We can see directly that amount of people from low-income families living in cities are concerned about COVID-19 are **531**.

## 14.3 Draw **Scatter Plot** using **Seaborn**
"""

# To draw scatter plot using 'Seaborn'
df3=pd.DataFrame({'participant_id':que_3['participant_id'],'income_level':que_3['income_level'],
                  'location_type':que_3['location_type'],
                  'covid_concern_level':que_3['covid_concern_level']})
df3.reset_index(inplace = True, drop = True)
df3['participant_id']=np.arange(1, len(df3) + 1)

# plotting scatter plot
fig, ax = plt.subplots(figsize=(10,5))
sns.scatterplot(ax=ax,x='participant_id',y='income_level',data=df3,hue='covid_concern_level',
                style='covid_concern_level',palette='bright')
sns.set_theme(style='darkgrid')
ax.set_title('No. of people living in city and had low income are concerned about COVID-19',fontsize=15)
ax.set_xlabel('No. of participants',fontsize=15)
ax.set_ylabel('Income level',fontsize=15)
fig.show()

"""#### **Observation:** From above we can say that there are around 500 people which have low income, still living in city and they are concerned about covid vaccine. In this some people are some what concerned(which represents by blue color and circle marker) and some people are very concerned(which represents by orange color and cross marker).

> ### **Question : 4**. How much ethnic minority male & female with a chronic medical condition are worried about the risk of getting sick with COVID-19 before getting a vaccine?
"""

# To find ethnic minority male and female with a chronic medical condition are worried about the risk of 
# getting sick with COVID-19 before getting a vaccine?

# Method 1 to find male and female
pd.options.display.max_rows = 100
que_4 = covid_df.groupby(['race','gender','chronic_med_condition','opinion_covid_risk']).count()['participant_id']
que_4

"""#### **Observation:** From above output, We can say that ethnic (means all have 'Black' value) minority male (means all have 'Male' value) with a chronic medical condition (means all have '1' value) are worried about the risk of getting sick with COVID-19 before getting a vaccine (means all have '1' and '2' value (55+59)) are **114**.

#### And, ethnic minority (means all have 'Black' value) female (means all have 'Female' value) with a chronic medical condition (means all have '1' value) are worried about the risk of getting sick with COVID-19 before getting a vaccine (means all have '1' and '2' value (150+121)) are **271**.

#### So, Total number of male & female are **385** (114+271). 
"""

# To find ethnic minority female with a chronic medical condition are worried about the risk of 
# getting sick with COVID-19 before getting a vaccine?

#Method 2 to find female
que_4_female = covid_df[(covid_df['race']=='Black') & (covid_df['gender']=='Female') & 
                        (covid_df['chronic_med_condition']==1) & 
                        ((covid_df['opinion_covid_risk']==1) | (covid_df['opinion_covid_risk']==2))] 
que_4_female

# To find ethnic minority male with a chronic medical condition are worried about the risk of 
# getting sick with COVID-19 before getting a vaccine?

# method 2 to find male
que_4_male = covid_df[(covid_df['race']=='Black') & (covid_df['gender']=='Male') & 
                      (covid_df['chronic_med_condition']==1) & 
                      ((covid_df['opinion_covid_risk']==1) | (covid_df['opinion_covid_risk']==2))] 

que_4_male

"""#### **Observation:** From above output, We can see directly that there are 271 female and 114 male with a chronic medical condition are worried about the risk of getting sick with COVID-19 before getting a vaccine.

#### So, total number of male and female are **385** (271+114)

## 14.4 Draw **Count Plot** using **Seaborn**
"""

# To draw count plot using 'Seaborn'

que_4= covid_df[(covid_df['race']=='Black') & ((covid_df['gender']=='Male')|(covid_df['gender']=='Female')) & 
                      (covid_df['chronic_med_condition']==1) & 
                      ((covid_df['opinion_covid_risk']==1) | (covid_df['opinion_covid_risk']==2))] 
df4= pd.DataFrame({'participant_id':que_4['participant_id'],'race':que_4['race'],
                   'gender':que_4['gender'],
                    'chronic_med_condition':que_4['chronic_med_condition'],
                    'opinion_covid_risk':que_4['opinion_covid_risk']})

# Plotting count plot
fig, ax = plt.subplots(figsize=(5, 5))
sns.countplot(ax=ax,x='race',hue='gender',data=df4,palette='Set1')
ax.set_title('No.of Black Male and Female with chronic condition and opinion about covid risk',fontsize=15)
ax.set_xlabel('Ethnic minority people',fontsize=15)
ax.set_ylabel('No. of participants',fontsize=15)
sns.set_theme(style='white')
fig.show()

"""#### **Observation:** From above chart, we can say that around 270 ethnic minority females and 110 ethnic minority males with cronic medical conditions have opinion to risk of getting sick from covid. So we can also say that here females ethnic minority are more as compare to male ethnic minority.

> ### **Question : 5**. Are there any special consideration on who should get the COVID-19 vaccine first?

Generally, we can say that the age over 55 are mostly getting sick early as compare to other younger and children, so they need the vaccine first as compare to other.
"""

# To find who should get the COVID-19 vaccine first

# Method 1
que_5 = covid_df.groupby('age_group').count()['participant_id']
que_5

"""#### **Observation:** In general, We can say that age over 55 should get vaccine first because they had high risk to get sick as compare to other.

#### So, From aove output, no. of people that are over 55 are **12,406** (5563+6843).
"""

# Method 2
que_5 = covid_df[(covid_df['age_group']=='55 - 64 Years') | (covid_df['age_group']=='65+ Years')]
que_5

"""#### **Observation:** From above output, We can see directly that there are **12,406** no. of people, who should get vaccine first because they had high risk to get sick as compare to other.

## 14.5 Draw **Cat Plot** using **Seaborn**
"""

# To draw cat plot using 'Seaborn'
df5=pd.DataFrame({'participant_id':que_5['participant_id'],'age_group':que_5['age_group']})
df5.reset_index(inplace = True, drop = True)
df5['participant_id']=np.arange(1, len(df5) + 1)

# Plotting cat plot
sns.catplot(ax=ax,y='age_group',data=df5, hue='age_group',
            palette='Blues_d',kind='count').set(
            title='No. of people that get first chance to get vaccine',
            xlabel='No. of participants',ylabel='Different age group of elder people')

"""#### **Observation:** From above chart, we can say that around 7000 people are age over 65 and around 5000 people are between 55-64 age. So total around 12000 people should get vaccine first as compare to other because they are elder and they had high risk to get sick as compare to other people.

> ### **Question : 6**. Is COVID-19 vaccine expected to be more effective for elder participants?
"""

# To find no. of elder people think that covid-19 vaccine is very effective for them
# First of all, to find no. of elder and younger people who think that covid vaccine is effective for them

# Method 1
que_6 = covid_df.groupby(['age_group','opinion_covid_vacc_effective']).count()['participant_id']
que_6

"""#### **Observation:** From above output, We can say that no. of elder people (means all are in age group of '55 - 64 Years' and '65+ Years') think that covid-19 vaccine is very effective for them (means all have '5' value) are **3504** (1599+1905) and no. of younger people (means all are in age group of '45 - 54 Years','35 - 44 Years' and '18 - 34 Years') think that covid-19 vaccine is very effective for them (means all have '5' value) are **3662** (1261+970+1431)."""

# To find no. of elder people who think that covid vaccine is effective for them
# Method 2
que_6_elder = covid_df[((covid_df['age_group']=='55 - 64 Years') | (covid_df['age_group']=='65+ Years')) & 
                 (covid_df['opinion_covid_vacc_effective']==5)]
que_6_elder

# To find no. of younger people who think that covid vaccine is effective for them
que_6_younger = covid_df[((covid_df['age_group']=='45 - 54 Years') | (covid_df['age_group']=='35 - 44 Years') | 
                 (covid_df['age_group']=='18 - 34 Years')) & (covid_df['opinion_covid_vacc_effective']==5)]
que_6_younger

"""#### **Observation:** From above output, We can see directly that are **3504** elder people and **3662** younger people think that covid-19 vaccine is very effective for them.

## 14.6 Draw **Pie chart** using **Matplotlib**
"""

# To draw pie chart using 'Matplotlib'
que_6_both = covid_df[((covid_df['age_group']=='55 - 64 Years') | (covid_df['age_group']=='65+ Years') |
                       (covid_df['age_group']=='45 - 54 Years') | (covid_df['age_group']=='35 - 44 Years') | 
                 (covid_df['age_group']=='18 - 34 Years')) & (covid_df['opinion_covid_vacc_effective']==5)] 
que_6_both
df6=pd.DataFrame({'participant_id':que_6_both['participant_id'],'age_group':que_6_both['age_group'],
                  'opinion_covid_vacc_effective':que_6_both['opinion_covid_vacc_effective']})
df6

# Plotting pie chart
age_group='18-34 Years','35-44 Years','45-54 Years','55-65 Years','65+ Years'
explode = (0, 0.1,0,0,0)  # only "explode" the 2nd slice (i.e. '35-44 Years')
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#9999ff']
fig, ax = plt.subplots(figsize=(7,7))
ax.pie(df6.groupby(['age_group']).count()['participant_id'], labels=age_group, autopct='%1.1f%%',counterclock=False,
        explode=explode,shadow=True, startangle=90, colors=colors)
ax.set_title('People of different age who think that covid vaccine is effective',fontsize=15)
plt.show()
#df6.groupby(['age_group']).count()['participant_id']

"""#### **Observation:** From above pie chart, we can say that less number of elder people (around total 49% (22.3% + 26.6%)) as compare to younger people (around 51% (17.6% + 13.5% + 20%))think that covid vaccine is effective for them.

> ### **Question : 7**. What are the chances of someone getting both COVID-19 and Seasonal flu vaccination at the same time?
"""

# To find the number of participant that will get chance to get COVID-19 and Seasonal flu vaccination at the
# same time, when it is available

# Method 1
que_7 = covid_df.groupby(['covid_vaccine','seasonal_flu_vaccine']).count()['participant_id']
que_7

"""#### **Observation:** From above output, We can say that participants who will get chance to take both COVID-19 (means all have '1' value) and Seasonal flu vaccination (means all have '1' value) at the same time are **7738**."""

# Method 2
que_7 = covid_df[(covid_df['covid_vaccine']==1) & (covid_df['seasonal_flu_vaccine']==1)]
que_7

"""#### **Observation:** From above output, We can see directly that there are **7738** participants who will get chance to take both COVID-19 and Seasonal flu vaccination at the same time.

## 14.7 Draw **Line Chart** using **Matplotlib**
"""

# To draw scatter chart using matplotlib
df7=pd.DataFrame({'participant_id':que_7['participant_id'],'covid_vaccine':que_7['covid_vaccine'],
                  'seasonal_flu_vaccine':que_7['seasonal_flu_vaccine']})
df7
df7.reset_index(inplace = True, drop = True)
df7['participant_id']=np.arange(1, len(df7) + 1)

# Plotting line chart
df7.plot.line(x='covid_vaccine',xlabel='Participants ready to take covid vaccine',
              ylabel='No. of participants',
              title='No of participants get chance to take both vaccine')
plt.grid(linestyle='-')
plt.show()

"""#### **Observation:** From above Line chart, we can say that there are around 7000 people get chance to take both covid and seasonal flu vaccine at the same time. Here we can't see the seasonal flu vaccine's(orange color)line because covid and seasonal flu vaccine people have same value(1). So, Lines are overlapped to each other.

> ### **Question : 8**. Are older people more worried about getting sick from the COVID-19 than younger people?

To get the answer, first we need to find no. of older people that are very worried about getting sick from the COVID-19.

After that, we need to find no. of younger people that are very worried about getting sick from the COVID-19.
"""

# To find no. of older and younger people that are very worried about getting sick from the COVID-19

# Method 1
que_8 = covid_df.groupby(['age_group','opinion_covid_sick_from_vacc']).count()['participant_id']
que_8

"""#### **Observation:** From above output, older people (means all are in age group of '55 - 64 Years' and '65+ Years') that are very worried about getting sick from the COVID-19 (means all have '1' value) are **4423** (1900+2523).

#### And, younger people (means all are in age group of '18 - 34 Years', '35 - 44 Years' and '45 - 54 Years') that are very worried about getting sick from the COVID-19 (means all have '1' value) are **4575** (1693+1187+1695).

#### So, we can say that younger people are more worried than older people to get sick from the COVID-19.
"""

# To find no. of younger people that are very worried about getting sick from the COVID-19

# Method 2 
# To find younger people
que_8_younger = covid_df[((covid_df['age_group']=='18 - 34 Years') | (covid_df['age_group']=='35 - 44 Years') | 
                        (covid_df['age_group']=='45 - 54 Years')) &
                        (covid_df['opinion_covid_sick_from_vacc']==1)]
que_8_younger

# Method 2 
# To find older people
que_8_older = covid_df[((covid_df['age_group']=='55 - 64 Years') | (covid_df['age_group']=='65+ Years'))
               & (covid_df['opinion_covid_sick_from_vacc']==1)]
que_8_older

"""#### **Observation:** From above output, We can see directly that there are **4575** younger people participants that are very worried about getting sick from the COVID-19.

#### And, **4423** older people that are very worried about getting sick from the COVID-19.

#### So, we can say that younger people are more worried than older people to get sick from the COVID-19.

## 14.8 Draw **Box Plot** using **Seaborn**
"""

# To draw box chart using 'Seaborn'
# Dataframe for older people
df8_older=pd.DataFrame({'participant_id':que_8_older['participant_id'],
                        'age_group':que_8_older['age_group'],
                        'opinion_covid_sick_from_vacc':que_8_older['opinion_covid_sick_from_vacc']})
df8_older.reset_index(inplace = True, drop = True)

# Dataframe for younger people
df8_younger=pd.DataFrame({'participant_id':que_8_younger['participant_id'],
                          'age_group':que_8_younger['age_group'],
                          'opinion_covid_sick_from_vacc':que_8_younger['opinion_covid_sick_from_vacc']})
df8_younger.reset_index(inplace = True, drop = True)
df8_older['participant_id']=np.arange(1, len(df8_older) + 1)
df8_younger['participant_id']=np.arange(1, len(df8_younger) + 1)

# Plotting box plot
fig, ax = plt.subplots(1,2,figsize=(18,7))
sns.boxplot(ax=ax[0],y='participant_id',
            x='opinion_covid_sick_from_vacc',hue='age_group',data=df8_older,
           palette="Set3",saturation=0.9)
sns.boxplot(ax=ax[1],x='opinion_covid_sick_from_vacc',y='participant_id',data=df8_younger,
            hue='age_group',palette="Set1",saturation=0.4)
ax[0].set_title('No. of older people whose opinion to get sick from covid vaccine',fontsize=15)
ax[0].set_xlabel('Opinion to get sick from covid vaccine',fontsize=15)
ax[0].set_ylabel('No. of participants',fontsize=15)
ax[1].set_title('No. of younger people whose opinion to get sick from covid vaccine',fontsize=15)
ax[1].set_xlabel('Opinion to get sick from covid vaccine',fontsize=15)
ax[1].set_ylabel('No. of participants',fontsize=15)
sns.set(style='darkgrid')
fig.show()

"""#### **Observation:** From above box chart, we cannot see the different values because they have very minor difference in the values. But they had different values with small ranges. We can say that around 4400 elder and 4500 younger people who are worried about getting sick from covid vaccine. So there are more number of younger people that are worried than elder people. It also shows the miniimum, median,25 percentile,75 percentile of people that are worried about getting sick from covid vaccine.

> ### **Question : 9**. No. of black healthcare worker concerned about COVID-19?
"""

# To find no. of black healthcare worker concerned about COVID-19

# Method 1
que_9 = covid_df.groupby(['race','is_healthworker','covid_concern_level']).count()['participant_id']
que_9

"""#### **Observation:** From aove output, We can say that no. of black (means all have 'Black' value) healthcare worker (means all have '1' value) concerned about COVID-19 (means all have '2' and '3' value) are **177** (94+83)."""

# Method 2
que_9 = covid_df[(covid_df['race']=='Black') & (covid_df['is_healthworker']==1) &
                 ((covid_df['covid_concern_level']==2) | (covid_df['covid_concern_level']==3))]
que_9

"""#### **Observation:** From above output, We can see directly that there are **177** no. of black healthcare worker concerned about COVID-19.

## 14.9 Draw **Bar Chart** using **Seaborn**
"""

# To draw bar chart using 'Seaborn'
df9=pd.DataFrame({'participant_id':que_9['participant_id'],'race':que_9['race'],'is_healthworker':que_9['is_healthworker'],'covid_concern_level':que_9['covid_concern_level']})
df9
df9.reset_index(inplace = True, drop = True)
df9['participant_id']=np.arange(1, len(df9) + 1)

# Plotting bar chart
fig,ax=plt.subplots(figsize=(7,5))
plot=sns.barplot(ax=ax,x='is_healthworker',y='participant_id',data=df9,hue='covid_concern_level',
                 palette='Set2')
ax.set_title('No. of people that are black health worker and concerned about covid-19',fontsize=15)
ax.set_xlabel('Healthcare workers',fontsize=15)
ax.set_ylabel('No. of participants',fontsize=15)
sns.set_theme(style='whitegrid')
fig.show()

"""#### **Observation:** From above bar chart, we can say that around 90 black health worker are some what concerned and around 80 black health worker are concerned about covid. So total(90+80) around 170 black healthcare worker are concerned about covid.

# 15. Save the dataset in file:
"""

# To save the dataset as .csv 
covid_df.to_csv('Covid_Flu_Servey.csv')

# To save the dataset as excel file 
covid_df.to_excel('Covid_Flu_Servey.xls')